{"name": "test_checkbox_and_dropdown[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (538, 654). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" title=\"3rd party ad content\" width=\"809\" height=\"100\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" style=\"border: 0px; vertical-align: bottom;\" data-google-container-id=\"1\"></iframe>\n  (Session info: chrome=141.0.7390.76); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff76974e8e5+80021]\n\tGetHandleVerifier [0x0x7ff76974e940+80112]\n\t(No symbol) [0x0x7ff7694d060f]\n\t(No symbol) [0x0x7ff769530a39]\n\t(No symbol) [0x0x7ff76952e3be]\n\t(No symbol) [0x0x7ff76952b2e1]\n\t(No symbol) [0x0x7ff76952a1a0]\n\t(No symbol) [0x0x7ff76951b7c8]\n\t(No symbol) [0x0x7ff76955122a]\n\t(No symbol) [0x0x7ff76951b056]\n\t(No symbol) [0x0x7ff769551440]\n\t(No symbol) [0x0x7ff76957968a]\n\t(No symbol) [0x0x7ff769551003]\n\t(No symbol) [0x0x7ff7695195d1]\n\t(No symbol) [0x0x7ff76951a3f3]\n\tGetHandleVerifier [0x0x7ff769a0dc7d+2960429]\n\tGetHandleVerifier [0x0x7ff769a07f3a+2936554]\n\tGetHandleVerifier [0x0x7ff769a28977+3070247]\n\tGetHandleVerifier [0x0x7ff7697683ce+185214]\n\tGetHandleVerifier [0x0x7ff76976fe1f+216527]\n\tGetHandleVerifier [0x0x7ff769757b24+117460]\n\tGetHandleVerifier [0x0x7ff769757cdf+117903]\n\tGetHandleVerifier [0x0x7ff76973dbb8+11112]\n\tBaseThreadInitThunk [0x0x7fff9536e8d7+23]\n\tRtlUserThreadStart [0x0x7fff9624c53c+44]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e07b549a837db893c1e7f28e0aa5ca30\")>\n\n    def test_checkbox_and_dropdown(setup):\n        driver = setup\n        driver.get(\"https://demoqa.com/automation-practice-form\")\n    \n        # Checkbox\n        checkbox = driver.find_element(By.XPATH, \"//label[text()='Sports']\")\n>       checkbox.click()\n\ntests\\test_demoqa_elements.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002064FDD1850>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff76973dbb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff9536e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7fff9624c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (538, 654). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" title=\"3rd party ad content\" width=\"809\" height=\"100\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" style=\"border: 0px; vertical-align: bottom;\" data-google-container-id=\"1\"></iframe>\nE         (Session info: chrome=141.0.7390.76); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff76974e8e5+80021]\nE       \tGetHandleVerifier [0x0x7ff76974e940+80112]\nE       \t(No symbol) [0x0x7ff7694d060f]\nE       \t(No symbol) [0x0x7ff769530a39]\nE       \t(No symbol) [0x0x7ff76952e3be]\nE       \t(No symbol) [0x0x7ff76952b2e1]\nE       \t(No symbol) [0x0x7ff76952a1a0]\nE       \t(No symbol) [0x0x7ff76951b7c8]\nE       \t(No symbol) [0x0x7ff76955122a]\nE       \t(No symbol) [0x0x7ff76951b056]\nE       \t(No symbol) [0x0x7ff769551440]\nE       \t(No symbol) [0x0x7ff76957968a]\nE       \t(No symbol) [0x0x7ff769551003]\nE       \t(No symbol) [0x0x7ff7695195d1]\nE       \t(No symbol) [0x0x7ff76951a3f3]\nE       \tGetHandleVerifier [0x0x7ff769a0dc7d+2960429]\nE       \tGetHandleVerifier [0x0x7ff769a07f3a+2936554]\nE       \tGetHandleVerifier [0x0x7ff769a28977+3070247]\nE       \tGetHandleVerifier [0x0x7ff7697683ce+185214]\nE       \tGetHandleVerifier [0x0x7ff76976fe1f+216527]\nE       \tGetHandleVerifier [0x0x7ff769757b24+117460]\nE       \tGetHandleVerifier [0x0x7ff769757cdf+117903]\nE       \tGetHandleVerifier [0x0x7ff76973dbb8+11112]\nE       \tBaseThreadInitThunk [0x0x7fff9536e8d7+23]\nE       \tRtlUserThreadStart [0x0x7fff9624c53c+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "parameters": [{"name": "setup", "value": "'chrome'"}], "start": 1761279290691, "stop": 1761279304939, "uuid": "76cec48c-f63b-4538-a5ad-5426372804e4", "historyId": "ee0d3ac5646abf569d48f22e91e9690d", "testCaseId": "bff34140f67d43206fb5f85e885b4bc8", "fullName": "tests.test_demoqa_elements#test_checkbox_and_dropdown", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_demoqa_elements"}, {"name": "host", "value": "ASCENDI-QI7C07E"}, {"name": "thread", "value": "304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_demoqa_elements"}], "titlePath": ["tests", "test_demoqa_elements.py"]}