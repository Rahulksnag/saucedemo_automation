{"name": "test_login_csv[edge-user0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom disconnected: unable to connect to renderer; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6b9292685+51877]\n\tGetHandleVerifier [0x0x7ff6b92926e4+51972]\n\tGetHandleVerifier [0x0x7ff6b9448c75+1847445]\n\t(No symbol) [0x0x7ff6b9041feb]\n\t(No symbol) [0x0x7ff6b903c3e0]\n\t(No symbol) [0x0x7ff6b903893c]\n\t(No symbol) [0x0x7ff6b907d64e]\n\t(No symbol) [0x0x7ff6b9071df3]\n\t(No symbol) [0x0x7ff6b9045b36]\n\t(No symbol) [0x0x7ff6b9044d80]\n\t(No symbol) [0x0x7ff6b9045973]\n\t(No symbol) [0x0x7ff6b910e4a5]\n\t(No symbol) [0x0x7ff6b910a75d]\n\tGetHandleVerifier [0x0x7ff6b92bcec3+226019]\n\tGetHandleVerifier [0x0x7ff6b92ac091+156849]\n\tGetHandleVerifier [0x0x7ff6b92b4589+190889]\n\tGetHandleVerifier [0x0x7ff6b92997c4+80868]\n\tGetHandleVerifier [0x0x7ff6b9299913+81203]\n\tGetHandleVerifier [0x0x7ff6b9287e96+8886]\n\tBaseThreadInitThunk [0x0x7fff9536e8d7+23]\n\tRtlUserThreadStart [0x0x7fff9624c53c+44]", "trace": "request = <SubRequest 'setup' for <Function test_login_csv[edge-user0]>>\n\n    @pytest.fixture(params=[\"chrome\", \"edge\"])\n    def setup(request):\n        \"\"\"\n        Pytest fixture to initialize and yield a driver instance per test.\n        \"\"\"\n>       driver = get_driver(request.param)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:60: in get_driver\n    driver = webdriver.Edge(options=edge_options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:46: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:71: in __init__\n    super().__init__(command_executor=executor, options=options)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:263: in __init__\n    self.start_session(capabilities)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:366: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B8F8F2D9A0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom disconnected: ...7ff6b9287e96+8886]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff9536e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7fff9624c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from disconnected: unable to connect to renderer; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6b9292685+51877]\nE       \tGetHandleVerifier [0x0x7ff6b92926e4+51972]\nE       \tGetHandleVerifier [0x0x7ff6b9448c75+1847445]\nE       \t(No symbol) [0x0x7ff6b9041feb]\nE       \t(No symbol) [0x0x7ff6b903c3e0]\nE       \t(No symbol) [0x0x7ff6b903893c]\nE       \t(No symbol) [0x0x7ff6b907d64e]\nE       \t(No symbol) [0x0x7ff6b9071df3]\nE       \t(No symbol) [0x0x7ff6b9045b36]\nE       \t(No symbol) [0x0x7ff6b9044d80]\nE       \t(No symbol) [0x0x7ff6b9045973]\nE       \t(No symbol) [0x0x7ff6b910e4a5]\nE       \t(No symbol) [0x0x7ff6b910a75d]\nE       \tGetHandleVerifier [0x0x7ff6b92bcec3+226019]\nE       \tGetHandleVerifier [0x0x7ff6b92ac091+156849]\nE       \tGetHandleVerifier [0x0x7ff6b92b4589+190889]\nE       \tGetHandleVerifier [0x0x7ff6b92997c4+80868]\nE       \tGetHandleVerifier [0x0x7ff6b9299913+81203]\nE       \tGetHandleVerifier [0x0x7ff6b9287e96+8886]\nE       \tBaseThreadInitThunk [0x0x7fff9536e8d7+23]\nE       \tRtlUserThreadStart [0x0x7fff9624c53c+44]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "parameters": [{"name": "setup", "value": "'edge'"}, {"name": "user", "value": "{'username': 'standard_user', 'password': 'secret_sauce'}"}], "start": 1761245511899, "stop": 1761245511899, "uuid": "a8920f79-24cc-4ccc-b571-7df4fda4b1b8", "historyId": "6d6f22f94e8da3c8de8600840e58d7f7", "testCaseId": "d46cb1c765b58de5e6b49f4b6da2ab5b", "fullName": "tests.test_login_csv#test_login_csv", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_csv"}, {"name": "host", "value": "ASCENDI-QI7C07E"}, {"name": "thread", "value": "13872-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_csv"}], "titlePath": ["tests", "test_login_csv.py"]}